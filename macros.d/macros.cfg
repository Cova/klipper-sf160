# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

[gcode_macro _Z_TILT]
gcode:
    {% if not printer['z_tilt'].applied %}
    Z_TILT_ADJUST
    {% endif %}


[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  {% set accel = params.S|float                      if 'S' in params and params.S|float > 0
            else [params.P|float,params.T|float]|min if 'P' in params and 'T' in params and 
                                                     params.P|float > 0 and params.T|float > 0 %}
  {% if accel is defined %}  
    {% set lim_accel          = [accel,     printer.configfile.settings.printer.max_accel         ]|min %}
    {% set lim_accel_to_decel = [accel / 2, printer.configfile.settings.printer.max_accel_to_decel]|min %}
    SET_VELOCITY_LIMIT ACCEL={lim_accel} ACCEL_TO_DECEL={lim_accel_to_decel}
  {% else %}
    {action_respond_info("Invalid M204 command \"M204 %s\"" % rawparams)}
  {% endif %}


# Convert Marlin LA commands to Klipper PA commands.
# Allows running Marlin LA calibration gcodes.
[gcode_macro M900]
gcode:
    {% set pa = params.K|float %}
    SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro PREHEAT]
gcode:1
    {% set BED = params.BED|default(100)|int %}
    {% set CHAMBER = params.CHAMBER|default(45)|int %}
    M117 Preheating
    M140 S{BED}                                ; Set bed temp to start heating
    SET_FAN_SPEED FAN=chamber_fan SPEED=0.25   ; Under-bed fans @ 25% while bed heats
    M190 S{BED}                                ; Wait for bed to reach temp
    SET_FAN_SPEED FAN=chamber_fan SPEED=1      ; Under-bed fans to full blast once bed is hot
    ## TODO: Wait for chamber to reach desired temp

[gcode_macro G32]
gcode:
    #BED_MESH_CLEAR
    G28 PROBE_LOCK=1                    ; Home all and leave Klicky probe locked on
    _Z_TILT                             ; Level bed left/right if not already done.
    #BED_MESH_CALIBRATE PROFILE=Temp
    Dock_Probe_Unlock                   ; Unlock probe and return it to its dock
    # BED_MESH_PROFILE LOAD=110-60
    # BED_MESH_PROFILE LOAD=65-30
    ## Uncomment only one clean method:
    ## Manual Clean
    # G0 X150 Y10 Z50 F27000
    # G4 P7500
    # G0 X206 Y290 Z10 F27000           ; Fast move to near Z endstop location
    ## Auto Clean
    # _CLEAN_NOZZLE
    # G0 X206 Z7.5 F27000               ; Fast move to Z endstop from cleaning brush
    ## End Clean Options
    # G28 Z                             ; Re-Home the Z now that nozzle is clean
    # G0 Z5 F27000                      ; Move nozzle up
    # G0 Y295 F27000                    ; Move away from Z-endstop and over bed
   

[gcode_macro _RAND_X_OFFSET]
gcode:
    {% set start = ([params.MIN|int, params.MAX|int] | min) %}
    {% set end = ([params.MIN|int, params.MAX|int] | max) %}
    {% set x_offset = (range(start, end) | random) %}
    SET_GCODE_OFFSET X={x_offset}
    { action_respond_info("Offsetting X by %s mm." % (x_offset)) }


[gcode_macro PARK]
gcode:
    G0 X157 Y157 F27000

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set X = params.X|default(150)|int %}
    {% set Y = params.Y|default(0)|int %}
    {% set Z = params.Z|default(15)|int %}
    {% set E = params.E|default(1.5)|float %}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F18000
    # {% if printer["gcode_macro M600"].do_clean|int == 1 %}
    #     # If clean will run on resume, then move to clean-height before pause
    #     # So that any purging done during change is kept low.
    #     G1 Z2.5 F2000
    # {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = params.E|default(0)|float %}
    G91
    G1 E{E} F2100
    G90
    # {% if printer["gcode_macro M600"].do_clean|int == 1 %}
    #     #_CLEAN_NOZZLE
    #     {% if printer["gcode_macro M600"].zheight|float > 3 %}
    #         G1 Z{printer["gcode_macro M600"].zheight|float}
    #     {% endif %}
    #     SET_GCODE_VARIABLE MACRO=M600 VARIABLE=zheight VALUE=0
    #     SET_GCODE_VARIABLE MACRO=M600 VARIABLE=do_clean VALUE=0
    # {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1 MOVE_SPEED=450
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END
    M117 Print Cancelled
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    
[gcode_macro M600]
variable_zheight: 0.0
variable_do_clean: 0
gcode:
    # SET_GCODE_VARIABLE MACRO=M600 VARIABLE=zheight VALUE={printer.toolhead.position.z|float}
    # SET_GCODE_VARIABLE MACRO=M600 VARIABLE=do_clean VALUE=1
    PAUSE

[gcode_macro _SET_PA]
variable_pa_ABS0.4: 0.046
variable_pa_ABS+0.4: 0.042
variable_pa_ASA0.4: 0.040
variable_pa_PLA0.4: 0.052
variable_pa_PETG0.4: 0.058
gcode:
    {% set NOZZLE = params.NOZZLE|default("0.4") %}
    {% set FILAMENT = params.FILAMENT|default("None") %}

    {% set pavar = ('pa_' + FILAMENT + NOZZLE)|lower %} 
    {% if pavar in printer["gcode_macro _SET_PA"] %}
      SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro _SET_PA"][pavar]}
      { action_respond_info("Pressure Advance set to %s for material %s" % (printer["gcode_macro _SET_PA"][pavar], FILAMENT)) }
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE=0
      { action_respond_info("Unknown filament '%s', Pressure Advance disabled." % (FILAMENT)) }
    {% endif %}

[gcode_macro _SET_Z_OFFSET]
# variable_zoff_PLA: 0.20
# variable_zoff_PETG: 0.12
# variable_zoff_ABS: 0.05
# variable_zoff_ABS+: 0.09
# variable_zoff_ASA: 0.05
gcode:
    {% set FILAMENT = params.FILAMENT|default("None") %}
    {% set zoffvar = ('zoff_' + FILAMENT)|lower %} 
    {% if zoffvar in printer["gcode_macro _SET_Z_OFFSET"] %}
      SET_GCODE_OFFSET Z={printer["gcode_macro _SET_Z_OFFSET"][zoffvar]}
      { action_respond_info("Z Offset set to %s for material %s" % (printer["gcode_macro _SET_Z_OFFSET"][zoffvar], FILAMENT)) }
    {% else %}
      SET_GCODE_OFFSET Z=0.0
      { action_respond_info("Unknown filament '%s', Z Offset reset to 0." % (FILAMENT)) }
    {% endif %}

[gcode_macro MOVE_SQUARE]
gcode:
    {% set SPEED = params.SPEED|default(18000)|int %}
    {% set COUNT = params.COUNT|default(3)|int %}

    {% for i in range(COUNT|int) %}
      G0 X10 Y10 F{SPEED}
      G0 X150 Y10 F{SPEED}
      G0 X150 Y150 F{SPEED}
      G0 X10 Y150 F{SPEED}
    {% endfor %}
    G0 X60 Y60 F{SPEED}

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
